// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/test.proto

package protoconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	proto "github.com/gorobot-nz/test-actions/proto"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AServiceName is the fully-qualified name of the AService service.
	AServiceName = "AService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AServiceTestProcedure is the fully-qualified name of the AService's Test RPC.
	AServiceTestProcedure = "/AService/Test"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	aServiceServiceDescriptor    = proto.File_proto_test_proto.Services().ByName("AService")
	aServiceTestMethodDescriptor = aServiceServiceDescriptor.Methods().ByName("Test")
)

// AServiceClient is a client for the AService service.
type AServiceClient interface {
	Test(context.Context, *connect.Request[proto.A]) (*connect.Response[proto.A], error)
}

// NewAServiceClient constructs a client for the AService service. By default, it uses the Connect
// protocol with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed
// requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aServiceClient{
		test: connect.NewClient[proto.A, proto.A](
			httpClient,
			baseURL+AServiceTestProcedure,
			connect.WithSchema(aServiceTestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// aServiceClient implements AServiceClient.
type aServiceClient struct {
	test *connect.Client[proto.A, proto.A]
}

// Test calls AService.Test.
func (c *aServiceClient) Test(ctx context.Context, req *connect.Request[proto.A]) (*connect.Response[proto.A], error) {
	return c.test.CallUnary(ctx, req)
}

// AServiceHandler is an implementation of the AService service.
type AServiceHandler interface {
	Test(context.Context, *connect.Request[proto.A]) (*connect.Response[proto.A], error)
}

// NewAServiceHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAServiceHandler(svc AServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	aServiceTestHandler := connect.NewUnaryHandler(
		AServiceTestProcedure,
		svc.Test,
		connect.WithSchema(aServiceTestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/AService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AServiceTestProcedure:
			aServiceTestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAServiceHandler struct{}

func (UnimplementedAServiceHandler) Test(context.Context, *connect.Request[proto.A]) (*connect.Response[proto.A], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("AService.Test is not implemented"))
}
